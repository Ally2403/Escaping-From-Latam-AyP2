/* autogenerated by Processing revision 1293 on 2024-05-06 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import gifAnimation.*;
import processing.sound.*;
import processing.video.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Escaping_From_Latam extends PApplet {




int op; // Variable que controla los personajes

//Imágenes y fuente
PImage fondo, mapa, vida1, helicoptero, restart1, latino2, granada, pausa1, dollar, desaparecer, latino5, latino8, latino11, latino14, botella, botella_negra, victoria1, victoriaChoice, meta;
PImage principal, personajes, como_jugar, argentina, configuracion, botonback;
PImage mexico, venezuela, peru, letsgo, trump;
PImage previc, previm, previa, previv, previp;
PFont font;

//Interfaz
int pantalla = 0, pantalla1 = 0;
int botonResaltado = -1;
int posicionx = 122;
int seleccionpersonaje = 1;
int tiempoInicio1;
int duracion = 2000, creditscount = 0;

//Variables personaje y fondo
int xpos = 0, ypos = 482, speed = 8, speed2 = 12, latinox, latinoy;
int xpos1 = 0, ypos1 = 0, colision = 3, i, vidax;
boolean derecha = false, abajo = false, izquierda = false, arriba = false, saltando = false, aTodaMadre = false;
boolean spaceWhileDown = false;
boolean spacePressed = false;
int lastTime; // Último tiempo en el que se aumentó la velocidad
int pausaelapsed = 0;
boolean speedboolean = false;
boolean muerto = false;
boolean win = false;
boolean movimiento = false; // Variable para controlar el movimiento
long tiempoInicio = 0; // Variable para almacenar el tiempo de inicio del movimiento

//Botón restart
int x = 630; // Coordenada x del botón
int y = 515; // Coordenada y del botón
int w = 310; // Ancho del botón
int h = 55;  // Alto del botón

//Plataformas
int platy, platx, yposplat, xposplat;
float yspeed = 0, gravity = 1;

//Helicóptero
int velheli = 2;

//Enemigos
int tamx, tamy;

//Pausa
boolean pausa;

//Vulnerabilidad de colisión
boolean invulnerable = false;
int tiempoInvulnerable = 2000; // Duración de la invulnerabilidad en milisegundos
int tiempoColision = 0; // Variable para almacenar el tiempo en que ocurrió la última colisión

//Billetes
int dollars = 0;
int dollarcount = 0;

//Gifs personajes con la librería gifAnimation
Gif latino, latino1, imgLeft, imgRight, atodamadre1, atodamadre2, atodamadre3, atodamadre4, atodamadre5, latino3, latino4, latino6, latino7, latino9, latino10, latino12, latino13, personajec, personajem, personajea, personajev, personajep;

//Intancio las clases a usar en el videojuego junto con su tamaño
Timer sw;
enemigos[] ene = new enemigos[18];
billetes[] bille = new billetes[42];
granada[] gran = new granada[14];
helicoptero[] heli = new helicoptero[7];
obstaculos[] obst = new obstaculos[20];
plataformas[] plat = new plataformas[5];
volumen[] vol = new volumen[2];
objetoespecial[] obj = new objetoespecial[3];

//Sonidos con la librería processing.sound y Videos con la librería processing.video
SoundFile music, music1, music2, music3, music4, music5, recogerbillete, salto, golpe, boton, atodamadresound, muerte, victoria;
Movie creditos1, pantallainicio;

public void setup() {
  /* size commented out by preprocessor */;

  //CONFIGURACIONES DE IMÁGENES, PERSONAJES Y FONDO
  fondo = loadImage("fondo juego.png");
  fondo.resize(width, height);
  mapa = loadImage("mapa.png");
  mapa.resize(24000, 900);
  vida1 = loadImage("vida.png");
  vida1.resize(50, 50);
  helicoptero = loadImage("Helicoptero.png");
  helicoptero.resize(446, 190);
  restart1 = loadImage("restart.png");
  restart1.resize(width, height);
  granada = loadImage("granada.png");
  granada.resize(100, 110);
  pausa1 = loadImage("pausa.png");
  pausa1.resize(470, 306);
  dollar = loadImage("dollar.png");
  dollar.resize(80, 70);
  botella = loadImage("botella.png");
  botella_negra = loadImage("botella negra.png");
  botella_negra.resize(botella.width, botella.height);
  victoria1 = loadImage("victoria.png");
  victoria1.resize(width, height);
  victoriaChoice = loadImage("victoriaChoice.png");
  victoriaChoice.resize(470, 306);
  principal = loadImage("InicialScreen.png");
  principal.resize(width, height);
  personajes = loadImage("/Data/Seleccion_de_jugadores.jpg");
  personajes.resize(width, height);
  mexico = loadImage("/Data/Seleccion_de_mexico.jpg");
  mexico.resize(width, height);
  argentina = loadImage("/Data/Seleccion_de_argentina.jpg");
  argentina.resize(width, height);
  venezuela = loadImage("/Data/Seleccion_de_venezuela.jpg");
  venezuela.resize(width, height);
  peru = loadImage("/Data/Seleccion_de_peru.jpg");
  peru.resize(width, height);
  personajec = new Gif(this, "Colombia.gif");
  personajec.play();
  personajem = new Gif(this, "Mexico.gif");
  personajem.play();
  personajea = new Gif(this, "Argentina-Messi.gif");
  personajea.play();
  personajev = new Gif(this, "Venezuela.gif");
  personajev.play();
  personajep = new Gif(this, "Peru.gif");
  personajep.play();
  como_jugar = loadImage("/Data/how_to_play.png");
  como_jugar.resize(width, height);
  letsgo = loadImage("/Data/Let's_go.jpg");
  letsgo.resize(width, height);
  previc = loadImage("/Data/Columbia.jpg");
  previc.resize(380, 96);
  previm = loadImage("/Data/Mechico.jpg");
  previm.resize(320, 80);
  previa = loadImage("/Data/Arjentina.jpg");
  previa.resize(380, 83);
  previv = loadImage("/Data/Venezuela11.jpg");
  previv.resize(380, 83);
  previp = loadImage("/Data/Penu.jpg");
  previp.resize(230, 75);
  configuracion = loadImage("/Data/configuracion.jpg");
  configuracion.resize(width, height);
  meta = loadImage("meta.png");
  meta.resize(200, 300);
  trump = loadImage("trump.png");
  trump.resize(300, 280);
  botonback = loadImage("botonback.png");

  creditos1 = new Movie(this, "creditos.mp4");
  pantallainicio = new Movie(this, "Gameplay.mp4");

  //CONFIGURACIONES DE LOS PERSONAJES

  //Colombia
  latino3 = new Gif(this, "latino7.gif");
  latino3.play();
  latino4 = new Gif(this, "latino8.gif");
  latino4.play();
  latino5 = loadImage("latino9.png");
  //Mexico
  latino = new Gif(this, "latino5.gif");
  latino.play();
  latino1 = new Gif(this, "latino4.gif");
  latino1.play();
  latino2 = loadImage("latino6.png");
  //Argentina
  latino6 = new Gif(this, "latino10.gif");
  latino6.play();
  latino7 = new Gif(this, "latino11.gif");
  latino7.play();
  latino8 = loadImage("latino12.png");
  //Venezuela
  latino9 = new Gif(this, "latino13.gif");
  latino9.play();
  latino10 = new Gif(this, "latino14.gif");
  latino10.play();
  latino11 = loadImage("latino15.png");
  //Peru
  latino12 = new Gif(this, "latino16.gif");
  latino12.play();
  latino13 = new Gif(this, "latino17.gif");
  latino13.play();
  latino14 = loadImage("latino18.png");
  latinox = latino.width;
  latinoy = latino.height;

  //Movimiento especial de los personajes
  atodamadre1 = new Gif(this, "atodamadre1.gif");
  atodamadre1.play();
  atodamadre2 = new Gif(this, "atodamadre2.gif");
  atodamadre2.play();
  atodamadre3 = new Gif(this, "atodamadre3.gif");
  atodamadre3.play();
  atodamadre4 = new Gif(this, "atodamadre4.gif");
  atodamadre4.play();
  atodamadre5 = new Gif(this, "atodamadre5.gif");
  atodamadre5.play();

  //CONFIGURACIONES DE LA FUENTE
  font = createFont("PressStart2P.ttf", 96);
  textFont(font);

  //CONFIGURACIONES DEL TIMER
  sw = new Timer();
  sw.start();

  //CONFIGURACIONES ENEMIGOS Y CREACIÓN DE OBJETOS
  imgLeft = new Gif(this, "Policia1.gif");
  imgLeft.play();
  imgRight = new Gif(this, "Policia.gif");
  imgRight.play();
  tamy = imgLeft.height;
  tamx = imgLeft.width;

  //                                 posx                         posy     limizquieda limderecha
  ene[0] = new enemigos(random(2905, 3685-imgLeft.width), 470-imgLeft.height, 2905, 3685-imgLeft.width);
  ene[1] = new enemigos(random(3815, 4855-imgLeft.width), 470-imgLeft.height, 3815, 4855-imgLeft.width);
  ene[2] = new enemigos(random(5132, 6732-imgLeft.width), 654-imgLeft.height, 5132, 6732-imgLeft.width);
  ene[3] = new enemigos(random(16150, 18579-imgLeft.width), 654-imgLeft.height, 16150, 18579-imgLeft.width);
  ene[4] = new enemigos(random(16150, 18579-imgLeft.width), 654-imgLeft.height, 16150, 18579-imgLeft.width);
  ene[5] = new enemigos(random(18681, 20086-imgLeft.width), 470-imgLeft.height, 18681, 20086-imgLeft.width);
  ene[6] = new enemigos(random(20641+imgLeft.width, 21570-imgLeft.width), 654-imgLeft.height, 20641+imgLeft.width, 21570-imgLeft.width);
  ene[7] = new enemigos(random(21703, 23200-imgLeft.width), 654-imgLeft.height, 21703, 23200-imgLeft.width);
  ene[8] = new enemigos(random(5132, 6732-imgLeft.width), 654-imgLeft.height, 5132, 6732-imgLeft.width);
  ene[9] = new enemigos(random(7180, 8759-imgLeft.width), 470-imgLeft.height, 7180, 8759-imgLeft.width);
  ene[10] = new enemigos(random(7180, 8759-imgLeft.width), 470-imgLeft.height, 7180, 8759-imgLeft.width);
  ene[11] = new enemigos(random(7180, 8759-imgLeft.width), 470-imgLeft.height, 7180, 8759-imgLeft.width);
  ene[12] = new enemigos(random(13677, 14708-imgLeft.width), 470-imgLeft.height, 13677, 14708-imgLeft.width);
  ene[13] = new enemigos(random(13677, 14708-imgLeft.width), 470-imgLeft.height, 13677, 14708-imgLeft.width);
  ene[14] = new enemigos(random(14848, 16016-imgLeft.width), 654-imgLeft.height, 14848, 16016-imgLeft.width);
  ene[15] = new enemigos(random(14848, 16016-imgLeft.width), 654-imgLeft.height, 14848, 16016-imgLeft.width);
  ene[16] = new enemigos(random(10513, 11390-imgLeft.width), 470-imgLeft.height, 10513, 11390-imgLeft.width);
  ene[17] = new enemigos(random(18681, 20086-imgLeft.width), 470-imgLeft.height, 18681, 20086-imgLeft.width);

  //CONFIGURACIONES DEL VOLUMEN, SONIDO Y CREACIÓN DE OBJETOS
  music = new SoundFile(this, "Cancion Juego.mp3");
  music1 = new SoundFile(this, "Sonido Colombiano.mp3");
  music2 = new SoundFile(this, "Sonido Mexicano.mp3");
  music3 = new SoundFile(this, "Sonido Argentino.mp3");
  music4 = new SoundFile(this, "Sonido Venezolano.mp3");
  music5 = new SoundFile(this, "Sonido Peruano.mp3");
  recogerbillete = new SoundFile(this, "Recoger billete.mp3");
  salto = new SoundFile(this, "Sonido Salto.mp3");
  golpe = new SoundFile(this, "Sonido Golpe.mp3");
  boton = new SoundFile(this, "Sonido boton.mp3");
  atodamadresound = new SoundFile(this, "Sonido Atodamadre.mp3");
  muerte = new SoundFile(this, "Sonido Muerte.mp3");
  victoria = new SoundFile(this, "Sonido Victoria.mp3");
  music.loop();
  vol[0] = new volumen(0.1f, 680, 100, 200, 50, false);
  music.amp(vol[0].volume);

  vol[1] = new volumen(0.1f, 680, 220, 200, 50, false);
  music1.amp(vol[1].volume);
  music2.amp(vol[1].volume);
  music3.amp(vol[1].volume);
  music4.amp(vol[1].volume);
  music5.amp(vol[1].volume);
  recogerbillete.amp(vol[1].volume);
  salto.amp(vol[1].volume);
  golpe.amp(vol[1].volume);
  boton.amp(vol[1].volume);
  atodamadresound.amp(vol[1].volume);
  muerte.amp(vol[1].volume);
  victoria.amp(vol[1].volume);

  //CONFIGURACIONES BILLETES Y OBJETOS ESPECIALES Y CREACIÓN DE OBJETOS
  //                    limizquierda  limderecha          posy
  bille[0] = new billetes(random(100, 1200-dollar.width), 500);
  bille[1] = new billetes(random(100, 1200-dollar.width), 500);
  bille[2] = new billetes(random(100, 1200-dollar.width), 500);
  bille[3] = new billetes(random(1330, 2850-dollar.width), 500);
  bille[4] = new billetes(random(1330, 2850-dollar.width), 500);
  bille[5] = new billetes(random(1330, 2850-dollar.width), 500);
  bille[6] = new billetes(random(2900, 3680-dollar.width), 318);
  bille[7] = new billetes(random(2900, 3680-dollar.width), 318);
  bille[8] = new billetes(random(3800, 4850-dollar.width), 318);
  bille[9] = new billetes(random(3800, 4850-dollar.width), 318);
  bille[10] = new billetes(random(5132, 6732-dollar.width), 500);
  bille[11] = new billetes(random(5132, 6732-dollar.width), 500);
  bille[12] = new billetes(random(5132, 6732-dollar.width), 500);
  bille[13] = new billetes(random(5132, 6732-dollar.width), 500);
  bille[14] = new billetes(random(7180, 8750-dollar.width), 318);
  bille[15] = new billetes(random(7180, 8750-dollar.width), 318);
  bille[16] = new billetes(random(7180, 8750-dollar.width), 318);
  bille[17] = new billetes(random(7180, 8750-dollar.width), 318);
  bille[18] = new billetes(random(9022, 9979-dollar.width), 500);
  bille[19] = new billetes(random(9022, 9979-dollar.width), 500);
  bille[20] = new billetes(random(10512, 11390-dollar.width), 318);
  bille[21] = new billetes(random(10512, 11390-dollar.width), 318);
  bille[22] = new billetes(random(11524, 12643-dollar.width), 500);
  bille[23] = new billetes(random(11524, 12643-dollar.width), 500);
  bille[24] = new billetes(random(11524, 12643-dollar.width), 500);
  bille[25] = new billetes(random(13183, 13545-dollar.width), 318);
  bille[26] = new billetes(random(13675, 14710-dollar.width), 318);
  bille[27] = new billetes(random(13675, 14710-dollar.width), 318);
  bille[28] = new billetes(random(14832, 16017-dollar.width), 500);
  bille[29] = new billetes(random(14832, 16017-dollar.width), 500);
  bille[30] = new billetes(random(14832, 16017-dollar.width), 500);
  bille[31] = new billetes(random(16150, 18579-dollar.width), 500);
  bille[32] = new billetes(random(16150, 18579-dollar.width), 500);
  bille[33] = new billetes(random(16150, 18579-dollar.width), 500);
  bille[34] = new billetes(random(16150, 18579-dollar.width), 500);
  bille[35] = new billetes(random(18683, 20087-dollar.width), 318);
  bille[36] = new billetes(random(18683, 20087-dollar.width), 318);
  bille[37] = new billetes(random(18683, 20087-dollar.width), 318);
  bille[38] = new billetes(random(20773, 21570-dollar.width), 500);
  bille[39] = new billetes(random(20773, 21570-dollar.width), 500);
  bille[40] = new billetes(random(21703, 21970-dollar.width), 500);
  bille[41] = new billetes(random(21703, 21970-dollar.width), 500);
  obj[0] = new objetoespecial(6980, 318, 50, 100);
  obj[1] = new objetoespecial(15500, 500, 120, 100);
  obj[2] = new objetoespecial(21502, 500, 190, 100);

  //CONFIGURACIONES GRANADA Y CREACIÓN DE OBJETOS
  //               posx+200  posinicialx yinicial
  gran[0] = new granada(1800+200, 1700, 300);
  gran[1] = new granada(1800+200, 1700, 300);
  gran[2] = new granada(17017+200, 17017, 300);
  gran[3] = new granada(17017+200, 17017, 300);
  gran[4] = new granada(21106+200, 21106, 300);
  gran[5] = new granada(21106+200, 21106, 300);
  gran[6] = new granada(5790+200, 5790, 300);
  gran[7] = new granada(5790+200, 5790, 300);
  gran[8] = new granada(9200+200, 9200, 300);
  gran[9] = new granada(9200+200, 9200, 300);
  gran[10] = new granada(11835+200, 11835, 300);
  gran[11] = new granada(11835+200, 11835, 300);
  gran[12] = new granada(15200+200, 15200, 300);
  gran[13] = new granada(15200+200, 15200, 300);

  //CONFIGURACIONES HELICOPTERO Y CREACIÓN DE OBJETOS
  //                       posx  posy  alturamax
  heli[0] = new helicoptero(1800, 300, 470);
  heli[1] = new helicoptero(17017, 300, 470);
  heli[2] = new helicoptero(21106, 300, 470);
  heli[3] = new helicoptero(5790, 300, 470);
  heli[4] = new helicoptero(9200, 300, 470);
  heli[5] = new helicoptero(11835, 300, 470);
  heli[6] = new helicoptero(15200, 300, 470);

  //CONFIGURACIONES OBSTACULOS Y CREACIÓN DE OBJETOS
  //                       posx  posy tamañox tamañoy
  obst[0] = new obstaculos(1200, 550, 130, 100);
  obst[1] = new obstaculos(2850, 520, 100, 130);
  obst[2] = new obstaculos(3685, 370, 130, 100);
  obst[3] = new obstaculos(4870, 550, 260, 100);
  obst[4] = new obstaculos(16017, 550, 133, 100);
  obst[5] = new obstaculos(18579, 520, 100, 130);
  obst[6] = new obstaculos(20087, 370, 132, 100);
  obst[7] = new obstaculos(20641, 550, 132, 100);
  obst[8] = new obstaculos(21570, 550, 133, 100);
  obst[9] = new obstaculos(6750, 520, 100, 130);
  obst[10] = new obstaculos(7045, 370, 130, 100);
  obst[11] = new obstaculos(11394, 550, 130, 100);
  obst[12] = new obstaculos(12643, 525, 100, 130);
  obst[13] = new obstaculos(13550, 370, 120, 100);
  obst[14] = new obstaculos(14727, 570, 120, 100);
  obst[15] = new obstaculos(8762, 555, 260, 100);
  obst[16] = new obstaculos(9979, 542, 100, 130);
  obst[17] = new obstaculos(10382, 368, 130, 100);
  obst[18] = new obstaculos(13053, 368, 130, 100);
  obst[19] = new obstaculos(13545, 368, 130, 100);

  //CONFIGURACIONES PLATAFORMAS Y CREACIÓN DE OBJETOS
  //                        posx  posy tamañox tamañoy
  plat[0] = new plataformas(2905, 470, 1950, 180);
  plat[1] = new plataformas(18683, 470, 1950, 180);
  plat[2] = new plataformas(6812, 470, 1950, 180);
  plat[3]= new plataformas(10059, 470, 1331, 180);
  plat[4]= new plataformas(12718, 470, 1992, 180);
}

//Leer video a reproducir en la pestaña de créditos
public void movieEvent(Movie creditos1) {
  creditos1.read();
}

//Leer video a reproducir en la pantalla principal
public void movieEvent1(Movie pantallainicio) {
  pantallainicio.read();
}

public void draw () {
  background (0);

  //DEFINICIÓN DE EL VOLUMEN DE LOS SONIDOS DEL VIDEOJUEGO
  music1.amp(vol[1].volume);
  music2.amp(vol[1].volume);
  music3.amp(vol[1].volume);
  music4.amp(vol[1].volume);
  music5.amp(vol[1].volume);
  recogerbillete.amp(vol[1].volume);
  salto.amp(vol[1].volume);
  golpe.amp(vol[1].volume);
  boton.amp(vol[1].volume);
  atodamadresound.amp(vol[1].volume);
  victoria.amp(vol[1].volume);

  //PANTALLAS A SELECCIONAR
  switch (pantalla) {
  case 0:
    image(pantallainicio, 0, 0, width, height);
    pantallainicio.play();

    image(principal, 0, 0);
    break;
  case 1:
    //Colombia Y selección de demás personajes
    reset();
    image(personajes, 0, 0);
    image(previc, 113, 217);
    break;
  case 2:
    //Controles del juego
    image(como_jugar, 0, 0);
    break;
  case 3:
    image(creditos1, 0, 0, width, height);
    creditos1.play();
    image(botonback, 0, 20, 200, 150);
    break;
  case 4:
    //Personaje Mexico
    image(mexico, 0, 0);
    image(previm, 117, 322);
    break;
  case 5:
    //Personaje Argentina
    image(argentina, 0, 0);
    image(previa, 119, 408);
    break;
  case 6:
    //Personaje Venezuela
    image(venezuela, 0, 0);
    image(previv, 113, 499);
    break;
  case 7:
    //Personaje Perú
    image(peru, 0, 0);
    image(previp, 112, 596);
    break;
  case 8:
    switch (seleccionpersonaje) {
    case 1:
      image(letsgo, 0, 0);
      image(personajec, 980, 353);
      op = 1;
      break;
    case 2:
      image(letsgo, 0, 0);
      image(personajem, 980, 353);
      op = 2;
      break;
    case 3:
      image(letsgo, 0, 0);
      image(personajea, 1010, 353);
      op = 3;
      break;
    case 4:
      image(letsgo, 0, 0);
      image(personajev, 1025, 353);
      op = 4;
      break;
    case 5:
      image(letsgo, 0, 0);
      image(personajep, 1028, 353);
      op = 5;
      break;
    }
    break;
  case 9:
    //Pestaña de configuraciones
    image(configuracion, 0, 0);
    noStroke();
    vol[0].volumen1();
    vol[1].volumen1();
    break;
  }
  //Previsualización de los personajes
  if (botonResaltado != -1) {
    switch (botonResaltado) {
    case 1:
      pantalla1 = 1;
      break;
    case 2:
      pantalla1 = 4;
      break;
    case 3:
      pantalla1 = 5;
      break;
    case 4:
      pantalla1 = 6;
      break;
    case 5:
      pantalla1 = 7;
      break;
    case 6:
      pantalla1 = 8;
      break;
    }
    switch (pantalla1) {
    case 1:
      image(personajes, 0, 0);
      image(previc, 113, 217);
      break;
    case 4:
      image(mexico, 0, 0);
      image(previm, 117, 322);
      break;
    case 5:
      image(argentina, 0, 0);
      image(previa, 119, 408);
      break;
    case 6:
      image(venezuela, 0, 0);
      image(previv, 113, 499);
      break;
    case 7:
      image(peru, 0, 0);
      image(previp, 112, 596);
      break;
    }
  }

  //Reinicio del video de créditos a la posición inicial si se vuelve a la pantalla principal
  if (pantalla == 0 && creditscount == 1) {
    creditos1.jump(1);
  }

  //Controla que no se reproduzca el video inicial si se está jugando para tener un mejor rendimiento de juego
  if (pantalla == 8) {
    pantallainicio.stop();
  } else if (pantalla != 0) {
    pantallainicio.jump(1);
  }

  //Tiempo de previsualización del personaje antes de comenzar el videojuego (gif saltando)
  if (pantalla == 8 && millis() - tiempoInicio1 >= duracion) {
    ganador();

    //VIDEOJUEGO COMIENZA//
    //Pestaña si se llega al final del juego
    if (win) {
      image(victoria1, 0, 0);
      image(victoriaChoice, 555, 297);

      //Define nuevas posiciones para las botellas recogidas y no recogidas en la pantalla de victoria
      obj[0].posfinalx =130;
      obj[0].posfinaly = 400;
      obj[1].posfinalx =230;
      obj[1].posfinaly = 400;
      obj[2].posfinalx =330;
      obj[2].posfinaly = 400;

      //Dibujar botellas conseguidas y no conseguidas a lo largo del mapa
      for (i=0; i<=2; i++) {
        if (obj[i].botella1) {
          obj[i].botella();
        } else if (obj[i].botella2 == false) {
          //Dibujar objeto en nueva posición después de recogido
          image(botella, obj[i].posfinalx, obj[i].posfinaly);
        }
      }
    } else if (pausa == true) {
      //Pestaña si el juego se encuentra en pausa junto con los controles de volumen
      image(fondo, 0, 0);
      image(pausa1, 555, 297);
      noStroke();
      vol[0].volumen1();
      vol[1].volumen1();
    } else if (colision == 0 || colision == -1) {
      //Si el personaje muere se ejecutan los siguientes procedimientos
      botonrestart();
      muerte.amp(vol[1].volume);
      muerte();
    } else {
      background(0);
      //Movimiento del mapa con respecto al personaje
      image(mapa, xpos1, ypos1);

      //Dibujar objetos de obstáculos
      for (i=0; i<obst.length; i++) {
        obst[i].obstaculos1();
      }

      //Dibujar objetos de billetes
      for (i=0; i<bille.length; i++) {
        if (bille[i].billete) {
          bille[i].billetes1();
        }
      }
      //Dibujar objetos especiales
      for (i=0; i<obj.length; i++) {
        if (obj[i].botella1) {
          obj[i].botella();
        } else if (obj[i].botella2 == false) {
          //Dibujar objeto en nueva posición después de recogido
          image(botella, obj[i].posfinalx, obj[i].posfinaly, 70, 90);
        }
      }

      //Mostrar número de billetes recolectados
      textAlign(CENTER);
      textSize(40);
      fill(255);
      text("x"+dollars, 1480, 90);

      //Dependiendo del persobaje dibujar sus imágenes y movimientos especiales
      //Dibujar dependiendo de si se mueven a la derecha o a la izquierda para seguir la continuidad del movimiento
      switch(op) {
      case 1:
        if (derecha) {
          image(latino4, xpos, ypos);
        } else {
          if (izquierda) {
            image(latino3, xpos, ypos);
          } else if (!aTodaMadre) {
            image(latino5, xpos, ypos);
          }
        }
        break;
      case 2:
        if (derecha) {
          image(latino, xpos, ypos);
        } else {
          if (izquierda) {
            image(latino1, xpos, ypos);
          } else if (!aTodaMadre) {
            image(latino2, xpos, ypos);
          }
        }
        break;
      case 3:
        if (derecha) {
          image(latino7, xpos, ypos);
        } else {
          if (izquierda) {
            image(latino6, xpos, ypos);
          } else if (!aTodaMadre) {
            image(latino8, xpos, ypos);
          }
        }
        break;
      case 4:
        if (derecha) {
          image(latino10, xpos, ypos);
        } else {
          if (izquierda) {
            image(latino9, xpos, ypos);
          } else if (!aTodaMadre) {
            image(latino11, xpos, ypos);
          }
        }
        break;
      case 5:
        if (derecha) {
          image(latino13, xpos, ypos);
        } else {
          if (izquierda) {
            image(latino12, xpos, ypos);
          } else if (!aTodaMadre) {
            image(latino14, xpos, ypos);
          }
        }
        break;
      }

      //Ejecutar movimiento especial
      aTodaMadre();

      //Dibujar objetos de helicópteros
      for (i=0; i<heli.length; i++) {
        heli[i].MoveHelicoptero();
      }

      //Ejecutar aumento de velocidad cada 15 segundos
      aumentoVel();

      //Movimiento del personaje y del mapa
      movelatino();
      movemapa();

      //Muestra el tiempo transcurrido
      time();

      //Dibuja los corazones de vidas constantemente
      vidas();

      //Reinicia el contador al llegar a las 10 monedas necesarias para aumentar una vida al jugador
      dollar_vida();

      //Dibuja objetos de granadas
      for (i=0; i<gran.length; i++) {
        gran[i].moveGranada();
      }

      //Dibujar objetos de enemigos si se encuentran vivos
      for (i=0; i<ene.length; i++) {
        if (ene[i].vivo) {
          ene[i].enemigos3();
        }
      }

      // Verifica si el personaje está invulnerable y si ha pasado suficiente tiempo desde la última colisión
      if (invulnerable && millis() - tiempoColision >= tiempoInvulnerable) {
        invulnerable = false; // Termina la invulnerabilidad después del tiempo puesto
      }

      //Dibuja imágenes estáticas en el juego
      image(dollar, 1330, 40);
      image(meta, xpos1 + 22700, 360);
      image(trump, xpos1 + 22700 + meta.width, 380);
    }
  }
}
//Clase que controla todas las interacciones con los billetes generados aleatoriamente
class billetes {
  float dollarPositionsX, dollarPositionsY;
  boolean billete = true;

  //Constructor
  billetes(float dollarPositionsX, int dollarPositionsY) {
    this.dollarPositionsY =  dollarPositionsY;
    this.dollarPositionsX =  dollarPositionsX;
  }
  public void billetes1() {
    image(dollar, xpos1 + dollarPositionsX, dollarPositionsY);
    //Si el persobaje se encuentra dentro de las coordenadas del billete es capaz de recogerlo
    if (xpos >= xpos1 + dollarPositionsX - 50 && xpos <= xpos1 + dollarPositionsX + 90 && ypos == dollarPositionsY) {
      //Si presiona la tecla UP
      if (keyCode == UP) {
        //Reproducir sonido al recoger billete
        recogerbillete.play(1, vol[1].volume);
        dollars++; // Incrementar el contador de recogidos
        dollarcount++; //Incrementar contador a reiniciar
        billete = false; //Desaparecer billete
      }
    }
  }
}

//Objetos especiales a conseguir a lo largo del mapa
class objetoespecial {
  float botellax, botellay, posfinalx, posfinaly;
  boolean botella1 = true, botella2 = true;

  //Constructor
  objetoespecial(float botellax, float botellay, float posfinalx, float posfinaly) {
    this.botellax = botellax;
    this.botellay = botellay;
    this.posfinalx = posfinalx;
    this.posfinaly = posfinaly;
  }
  public void botella() {
    //Si la botella no se ha recogido
    if (botella1) {
      //Si no ha ganado el juego las dibuja normalmente
      if (win == false) {
        image(botella, xpos1 + botellax, botellay, 70, 90);
        image(botella_negra, posfinalx, posfinaly, 70, 90);
      } else {
        image(botella_negra, posfinalx, posfinaly);
      }
    }
    //Si está dentro de las coordenadas para recoger la botella puede recogerla
    if (xpos >= xpos1 + botellax - 50 && xpos <= xpos1 + botellax + 100 && ypos == botellay) {
      if (keyCode == UP) {
        //Si recoge la botella
        //Reproducir sonido de recoger botella
        recogerbillete.play(1, vol[1].volume);
        botella1 = false; //Recogió la botella y la desaparece
        botella2 = false; //Controla si la botella se dibujará o no en la esquina superior izquierda al ser recogido
      }
    }
  }
}

//Reinicia el contador al llegar a las 10 monedas necesarias para aumentar una vida al jugador para poder seguir recolectando
public void dollar_vida() {
  if (dollarcount == 10) {
    dollarcount = 0;
    colision = colision + 1;
  }
}
//La clase del cronómetro
class Timer {
  int startTime = 0, pauseTime = 0, totalPausedTime = 0;
  boolean running = false;
  boolean paused = false;

  //Inicia el cronómetro
  //Todo el cronómetro fue hecho con la función millis() la cual arroja el tiempo em milisegundos
  public void start() {
    if (!running) {
      startTime = millis() - totalPausedTime;
      running = true;
      paused = false;
    }
  }

  public void stop() {
    running = false;
    paused = false;
  }

  //"Pausa" el tiempo
  public void pause() {
    if (running && !paused) {
      pauseTime = millis();
      paused = true;
    }
  }

  //Resume el tiempo pausado anteriormente
  public void resume() {
    if (running && paused) {
      totalPausedTime += millis() - pauseTime;
      paused = false;
    }
  }

  //Si se llama a esta función se reinicia el tiempo
  public void restart() {
    startTime = millis();
    totalPausedTime = 0;
    running = true;
    paused = false;
  }

  //Tiempo total trasncurrido
  public int getElapsedTime() {
    int elapsed;
    if (running) {
      if (paused) {
        elapsed = pauseTime - startTime - totalPausedTime;
      } else {
        elapsed = millis() - startTime - totalPausedTime;
      }
    } else {
      elapsed = 0;
    }
    return elapsed;
  }

  //Estas funciones devuelven el tiempo transcurrido en milisegundos, segundos y minutos
  public int milisecond() {
    return (getElapsedTime() / 10) % 100;
  }

  public int second() {
    return (getElapsedTime() / 1000) % 60;
  }

  public int minute() {
    return (getElapsedTime() / (1000 * 60)) % 60;
  }
}

//Muestra en pantalla el cronómetro
public void time() {
  textAlign(CENTER);
  textSize(40);
  fill(255);
  //NF CONVIERTE NÚMEROS A STRING AÑADIENDO 0 A LA IZQUIERDA, POR ESO SE PONE COMO PARÁMETRO 2 PARA QUE SOLO MUESTRE 2 DÍGITOS
  text(nf(sw.minute(), 2)+":"+nf(sw.second(), 2)+":"+nf(sw.milisecond(), 2), 780, 100);

  //Cuando llegue a 100 segundos muera el personaje
  if (sw.minute() == 1 && sw.second() >= 40 ) {
    colision = 0;
  }
}
//Clase de los policías
class enemigos {
  float posX;
  int posY;
  int leftLimit;
  int rightLimit;
  boolean right, left = true, vivo=true;
  float speed1 = 2;

  //Constructor
  //Se les da una posición en x y en y, un límite a la izquierda y uno a la derecha para desplazarse
  enemigos(float posX, int posY, int leftLimit, int rightLimit) {
    this.posX = posX;
    this.posY = posY;
    this.leftLimit = leftLimit;
    this.rightLimit = rightLimit;
  }

  public void enemigos3() {
    //Los enemigos desaparecerán si son asesinados con el movimiento especial ATodaMadre
    if (aTodaMadre) {
      if (xpos + latinox >= xpos1 + posX &&
        xpos <= xpos1 + posX + imgLeft.width &&
        ypos + latinoy >= posY &&
        ypos <= posY + imgLeft.height) {
        //Se reproduce el sonido de golpe
        golpe.play(1, vol[1].volume);
        vivo = false;
      }
    } else {
      //Si no lo toca con el movimiento de ATodaMadre, detecta la colisión
      obstaculos1(xpos1 + posX, posY, tamx, tamy);
    }

    //Actualizar la posición x sumando la velocidad individual de los enemigos
    posX += speed1;

    //Verifica si el enemigo se encuentra justo en los límites
    if (posX >= rightLimit || posX <= leftLimit) {
      // Cambiar la imagen y la dirección de movimiento
      if (posX >= rightLimit) {
        posX = rightLimit;
        image(imgRight, xpos1 + posX, ypos);
        right = true;
        left = false;
      } else if (posX <= leftLimit) {
        posX = leftLimit;
        image(imgLeft, xpos1 + posX, ypos);
        right = false;
        left = true;
      }
      speed1 *= -1; //Cambiar la dirección de movimiento
    } else {
      //Dibujar la imagen en su posición actual
      if (left) {
        image(imgLeft, xpos1 + posX, posY);
      } else if (right) {
        image(imgRight, xpos1 + posX, posY);
      }
    }
  }
}
//Clase de las granadas lanzadas desde los helicópteros
class granada {
  float posinicialx, yinicial;
  float x1 = posinicialx, y1 = yinicial, posx; //Posición de la granada
  float vx, vy; //Velocidades en x y en y
  float g = 0.5f; //Gravedad
  float r = 20;
  float friccion = 0.95f; //Coeficiente de fricción
  boolean enMovimiento; //Variable para controlar si la granada está en movimiento
  int tiempoAnterior = millis(); //Variable para almacenar el tiempo en que se lanzó la granada anteriormente
  int tiempoEspera = PApplet.parseInt(random(1000, 4000)); //Tiempo de espera aleatorio antes de lanzar la granada nuevamente

  //Constructor
  granada(int posx, float posinicialx, float yinicial) {
    this.posx = posx;
    this.posinicialx = posinicialx;
    this.yinicial = yinicial;
  }

  public void moveGranada() {
    yinicial = yinicial + velheli;
    posx = xpos1 + x1;
    image(granada, xpos1 + x1, y1, r*3, r*3);
    colisiongranada();
    //Si la granada se encuentra en movimiento
    if (enMovimiento) {
      x1 += vx;
      y1 += vy;
      vy += g;

      //Revisa si la granada llega al suelo
      if (y1 + r >= 900-290) {
        y1 = 900-290 - r; //Ajusta la posición para que la granada esté justo en el suelo
        vy = 0; //Detiene el movimiento vertical

        //Aplica fricción al movimiento horizontal
        vx *= friccion;

        //Si la velocidad horizontal es muy baja, detiene la granada
        if (abs(vx) < 0.1f) {
          enMovimiento = false;

          //Actualiza el tiempo anterior y el tiempo de espera
          tiempoAnterior = millis();
          tiempoEspera = PApplet.parseInt(random(1000, 4000));
        }
      }
    }

    //Verifica si ha pasado el tiempo de espera y lanza la granada nuevamente
    if (!enMovimiento && millis() - tiempoAnterior >= tiempoEspera) {
      lanzarBolita(posinicialx+200);
    }
  }

  public void lanzarBolita(float posinicialx) {
    //Genera un número aleatorio que determina la dirección del lanzamiento (-1 para izquierda, 1 para derecha)
    float direccion = random(-1, 1);

    //Asigna la velocidad inicial en x en función de la dirección del lanzamiento
    vx = direccion * random(3, 8); //Velocidad aleatoria entre 3 y 8

    //Asigna la velocidad inicial en y
    vy = random(-10, -20); //Velocidad aleatoria entre -10 y -20

    //Reinicia la posición de la granada
    x1 = posinicialx;
    y1 = yinicial;

    //Reinicia la variable del movimiento
    enMovimiento = true;
  }

  //Se verifica la colisión entre la granada y el personaje
  public void colisiongranada() {

    //Si no se encuentra en el tiempo en el que puede chocarse sin recibir daño (cooldown)
    if (!invulnerable) {

      //Si colisiona con el objeto
      if (xpos + latinox >= posx &&
        xpos <= posx + r*3 &&
        ypos + latinoy >= y1 &&
        ypos <= y1 + r*3) {
        invulnerable = true; //Activar la invulnerabilidad

        //Cuando colisiona va a saltar ya sea a la derecha o a la izquierda
        saltar();
        if (derecha) {
          xpos = xpos - 150;
        }
        if (izquierda) {
          xpos = xpos + 150;
        }

        //Reduce una vida
        colision = colision - 1;
        //Reinicia la velocidad
        speed = 8;
        speed2 = 12;

        //Dependiendo del personaje reproduce su sonido característico si no es la última vida que le queda
        if (op == 1 && colision != 0) {
          music1.play(1, vol[1].volume);
        } else if (op == 2 && colision != 0) {
          music2.play(1, vol[1].volume);
        } else if (op == 3 && colision != 0) {
          music3.play(1.8f, vol[1].volume);
        } else if (op == 4 && colision != 0) {
          music4.play(1, vol[1].volume);
        } else if (op == 5 && colision != 0) {
          music5.play(1, vol[1].volume);
        }

        //Reinicia la posición de la granada
        x1 = posinicialx;
        y1 = yinicial;

        tiempoColision = millis(); //Actualiza el tiempo desde la última colisión
      }
    }
  }
}
//Clase que controla los movimientos del helicóptero
class helicoptero {
  int posinicialx, yinicial, alturamax;
  helicoptero(int posinicialx, int yinicial, int alturamax) {
    this.posinicialx = posinicialx;
    this.yinicial = yinicial;
    this.alturamax = alturamax;
  }
  public void MoveHelicoptero() {
    // Actualizar la posición vertical
    yinicial = yinicial + velheli;
    // Cambiar la dirección si alcanza los límites superior o inferior
    if (yinicial > alturamax || yinicial < 0) {
      velheli = -velheli;
    }
    image(helicoptero, xpos1 + posinicialx, yinicial);
  }
}

//Aquí se encuentran todos los hilos que manejan las teclas utilizadas en el videojuego

//Tecla presionada
public void keyPressed() {
  if (keyCode == RIGHT) {
    derecha = true;
  } else if (keyCode == LEFT) {
    izquierda = true;
  }
  if (keyCode == DOWN) {
    abajo = true;
  }
  //A toda madre
  if (keyCode == ' ') {// Espacio
    spacePressed = true;
    spaceWhileDown = abajo; //Verifica si la tecla de abajo estaba presionada al presionar el espacio
  }
  //Tecla para saltar = espacio
  if (key == ' ' && !saltando && abajo == false && aTodaMadre == false) {
    saltar();
  }
  //Presionar TAB para abrir el menú de pausa
  if (keyCode == TAB) {
    pausa = true;
    //Pausa el tiempo mientras se encuentra en el menú de pausa
    sw.pause();
  }
}

//Tecla soltada
public void keyReleased () {
  if (keyCode == RIGHT) {
    derecha = false;
  } else if (keyCode == LEFT) {
    izquierda = false;
  }
  //Combinación de teclas para el movimiento especial A Toda Madre
  if (keyCode == DOWN) {
    abajo = false;
    if (spacePressed && spaceWhileDown) {
      aTodaMadre = true;
      if (!movimiento) {
        //Reproducir sonido de ATodaMadre
        atodamadresound.play(1, vol[1].volume);
        movimiento = true; //Iniciar el movimiento especial
        tiempoInicio = millis(); //Guardar el tiempo de inicio del movimiento especial
      }
    }
  }
  if (keyCode == ' ') { //Espacio ya no está presionado
    spacePressed = false;
  }
}

//Aquí se encuentran todos los hilos que controlan el uso del mouse dentro del videojuego

//Mouse presionado
public void mouseClicked() {
  //Se valida si la pantalla se encuentra en el aparatado de los personajes y luego dependiendo del botón presionado escoge una pantalla u otra
  if (pantalla == 1 || pantalla == 4 || pantalla == 5 || pantalla == 6 || pantalla == 7) {
    if (mouseX > 50 && mouseX< 135 && mouseY > 18 && mouseY < 123) {
      pantalla = 0;
      boton.play(1, vol[1].volume);
    } else if (mouseX > posicionx && mouseX<posicionx + 283 && mouseY >243 && mouseY<293) {
      pantalla = 1;
      seleccionpersonaje = 1;
      boton.play(1, vol[1].volume);
    } else if (mouseX > posicionx + 3 && mouseX<posicionx + 218 && mouseY >336 && mouseY<387) {
      pantalla = 4;
      seleccionpersonaje = 2;
      boton.play(1, vol[1].volume);
    } else if (mouseX > posicionx + 3 && mouseX<posicionx + 321 && mouseY >428 && mouseY<483) {
      pantalla = 5;
      seleccionpersonaje = 3;
      boton.play(1, vol[1].volume);
    } else if (mouseX > posicionx + 1 && mouseX<posicionx + 321 && mouseY >521 && mouseY<571) {
      pantalla = 6;
      seleccionpersonaje = 4;
      boton.play(1, vol[1].volume);
    } else if (mouseX > posicionx + 3 && mouseX<posicionx + 149 && mouseY >612 && mouseY<663) {
      pantalla = 7;
      seleccionpersonaje = 5;
      boton.play(1, vol[1].volume);
    } else if (mouseX > 32 && mouseX<430 && mouseY >707 && mouseY<764) {
      pantalla = 8;
      boton.play(1, vol[1].volume);
      sw.restart();
      tiempoInicio1 = millis();
    }
  } else if (pantalla == 2) {
    //How to play
    if (mouseX > 18 && mouseX< 104 && mouseY > 20 && mouseY < 128) {
      pantalla = 0;
      boton.play(1, vol[1].volume);
    }
  } else if (pantalla == 3) {
    //Credits
    if (mouseX > 54 && mouseX< 138 && mouseY > 22 && mouseY < 118) {
      pantalla = 0;
      boton.play(1, vol[1].volume);
    }
  } else if (pantalla == 9) {
    //Settings
    if (mouseX > 52 && mouseX< 140 && mouseY > 8 && mouseY < 115) {
      pantalla = 0;
      boton.play(1, vol[1].volume);
    }
  }
  //Pantalla inicial
  if (pantalla == 0) {
    if (mouseX > 70 && mouseX<553 && mouseY >337 && mouseY<405) {
      pantalla = 1;
      boton.play(1, vol[1].volume);
    } else if (mouseX > 70 && mouseX <600 && mouseY >429 && mouseY<504) {
      pantalla = 2;
      boton.play(1, vol[1].volume);
    } else if (mouseX > 70 && mouseX < 410 && mouseY > 519 && mouseY <586) {
      pantalla = 3;
      creditscount = 1;
      boton.play(1, vol[1].volume);
    } else if (mouseX > 70 && mouseX < 458 && mouseY > 610 && mouseY <685) {
      pantalla = 9;
      boton.play(1, vol[1].volume);
    }
  }


  //Botón restart en menú de muerte
  if (mouseX > x && mouseX < x + w && mouseY > y && mouseY < y + h && (colision == 0 || colision == -1)) {
    boton.play(1, vol[1].volume);
    reset();
  }

  //Botón de exit en menú de muerte
  if (mouseX > 695 && mouseX < 695 + 180 && mouseY > 580 && mouseY < 580 + 57 && (colision == 0 || colision == -1) && pantalla == 8) {
    boton.play(1, vol[1].volume);
    reset();
    pantalla = 0;
  }

  //Botón de continuar en menu de pausa
  if (mouseX > 555 && mouseX < 555 + 470 && mouseY > 295 && mouseY < 295 + 150 && pausa == true) {
    boton.play(1, vol[1].volume);
    pausa = false;
    sw.resume();
  }

  //Botón de exit
  if (mouseX > 555 && mouseX < 555 + 470 && mouseY > 450 && mouseY < 450 + 150 && (pausa == true || win == true) && pantalla == 8) {
    boton.play(1, vol[1].volume);
    reset();
    pantalla = 0;
    pausa = false;
  }

  //Botón play again
  if (mouseX > 555 && mouseX < 555 + 470 && mouseY > 295 && mouseY < 295 + 150 && win == true && pantalla == 8) {
    boton.play(1, vol[1].volume);
    win = false;
    reset();
  }
}

//Mouse presionado
public void mousePressed() {

  //Verificar si el mouse está sobre el control deslizante del volumen
  if (mouseX > vol[0].sliderX && mouseX < vol[0].sliderX + vol[0].sliderWidth && mouseY > vol[0].sliderY && mouseY < vol[0].sliderY + vol[0].sliderHeight) {
    vol[0].dragging = true;
  }
  if (mouseX > vol[1].sliderX && mouseX < vol[1].sliderX + vol[1].sliderWidth && mouseY > vol[1].sliderY && mouseY < vol[1].sliderY + vol[1].sliderHeight) {
    vol[1].dragging = true;
  }
}

public void mouseReleased() {

  //Se suelta el mouse, cambian los volúmenes del juego
  vol[0].dragging = false;
  vol[1].dragging = false;
}

public void mouseDragged() {
  //Si se está arrastrando la barra deslizante
  if (vol[0].dragging) {
    //Asigna a ese controlador de volumen el porcentaje escogido para cada sonido y no permite que se salga de los límites
    vol[0].volume = constrain((mouseX - vol[0].sliderX) / vol[0].sliderWidth, 0, 1);
    music.amp(vol[0].volume);
    //amp controla valores de 0 a 1, siendo 0 completo silencio y 1 el volumen máximo
  }
  if (vol[1].dragging) {
    vol[1].volume = constrain((mouseX - vol[1].sliderX) / vol[1].sliderWidth, 0, 1);
    music1.amp(vol[1].volume);
    music2.amp(vol[1].volume);
    music3.amp(vol[1].volume);
    music4.amp(vol[1].volume);
    music5.amp(vol[1].volume);
    recogerbillete.amp(vol[1].volume);
    salto.amp(vol[1].volume);
    golpe.amp(vol[1].volume);
    boton.amp(vol[1].volume);
    atodamadresound.amp(vol[1].volume);
    victoria.amp(vol[1].volume);
  }
}

public void mouseMoved() {
  //Verifica si el mouse está sobre algún botón y actualiza el botón resaltado a previsualizar
  if (pantalla == 1 || pantalla == 4 || pantalla == 5 || pantalla == 6 || pantalla == 7) {
    if (mouseX > posicionx && mouseX < posicionx + 283 && mouseY > 243 && mouseY < 293) {
      botonResaltado = 1;
    } else if (mouseX > posicionx + 3 && mouseX < posicionx + 218 && mouseY > 336 && mouseY < 387) {
      botonResaltado = 2;
    } else if (mouseX > posicionx + 3 && mouseX < posicionx + 321 && mouseY > 428 && mouseY < 483) {
      botonResaltado = 3;
    } else if (mouseX > posicionx + 1 && mouseX < posicionx + 321 && mouseY > 521 && mouseY < 571) {
      botonResaltado = 4;
    } else if (mouseX > posicionx + 3 && mouseX < posicionx + 149 && mouseY > 612 && mouseY < 663) {
      botonResaltado = 5;
    } else if (mouseX > 32 && mouseX < 430 && mouseY > 707 && mouseY < 764) {
      botonResaltado = 6;
    } else {
      botonResaltado = -1; //En caso de que no esté sobre ningún botón
    }
  }
}

//Aquí se encuentra todo lo que controla el movimiento del juego, desde el personaje hasta el mapa

//Aumenta la velocidad del personaje cada 15 segundos, tanto en el movimiento normal como en el especial
public void aumentoVel() {
  if (sw.getElapsedTime() >= lastTime + 15000 && !speedboolean) {
    speed = speed + 3;
    speed2 = speed2 + 3;
    lastTime = sw.getElapsedTime();
    speedboolean = true;
  } else if (sw.getElapsedTime() < lastTime + 15000) {
    speedboolean = false;
  }
}

//MOVIMIENTO ESPECIAL DEL PERSONAJE: A TODA MADRE
public void aTodaMadre() {
  if (movimiento) {
    //El movimiento solo dura 1 segundo
    if (millis() - tiempoInicio >= 1000) {
      movimiento = false; //Detener el movimiento
      aTodaMadre = false;
    } else if (!izquierda && aTodaMadre == true && !invulnerable) {
      //Si la combinación de teclas apropiada fue realizada se muestra la animación del personaje seleccionado en su forma de movimiento especial
      switch(op) {
      case 1:
        image(atodamadre1, xpos, ypos-40);
        break;
      case 2:
        image(atodamadre2, xpos, ypos-40);
        break;
      case 3:
        image(atodamadre3, xpos, ypos-40);
        break;
      case 4:
        image(atodamadre4, xpos, ypos-40);
        break;
      case 5:
        image(atodamadre5, xpos, ypos-40);
        break;
      }
      aTodaMadre = true;

      //Utiliza la velocidad incrementada del movimiento especial
      xpos1 = xpos1 - speed2;
      xpos = xpos + speed2;
    } else {
      aTodaMadre = false;
    }
  }
}

//Movimiento del mapa = contrario al movimiento del personaje
public void movemapa() {
  if (derecha) {
    xpos1 = xpos1 - speed;
  }
  if (izquierda && xpos1 != 0) {
    xpos1 = xpos1 + speed;
  }
  //Hasta donde llegará el movimiento del mapa
  xpos1 = constrain(xpos1, -23700, 0);

  //La variable xpos1 controla todo el movimiento del mapa y cualquier posición asociada a esta se moverá de la misma manera
  //Ejemplo: plataformas, billetes, granadas
}

//Movimiento del personaje
public void movelatino() {

  if (derecha) {
    xpos = xpos + speed;
  }
  if (izquierda) {
    xpos = xpos - speed;
  }
  if (abajo) {
    ypos = ypos + speed;
  }
  gravedad();

  //Dibujar plataformas sobre las que el personaje se moverá
  for (i=0; i<plat.length; i++) {
    plat[i].plataformas1();
  }

  //Límites de la pantalla por los cuales se puede mover el personaje
  xpos = constrain(xpos, 100, 700);
  ypos = constrain(ypos, 0, 900-400);

  //xpos y ypos controlan el movimiento del personaje y ayudarán a comprobar también las colisiones
}

//Cuando se ejecuta este procedimiento el personaje salta
public void saltar() {
  yspeed = -25;
  saltando = true;
  if (!invulnerable) {
    //Reproduce el sonido de salto
    salto.play(1, vol[1].volume);
  }
}

public void nosaltar() {
  if (ypos >= 900-400) { //Si el personaje toca el suelo
    ypos = 900-400;
    yspeed = 0;
    saltando = false;
  }
}

//Gravedad que se le aplica al salto
public void gravedad() {
  if (!saltando && ypos >= 900-400) {
    yspeed = 0;
    saltando = false;
  } else {
    yspeed += gravity;
  }
  ypos += yspeed;
}

//Si el personaje llega a las coordenadas que limitan el final del mapa, este gana
public void ganador() {
  //límite para ganar -22000
  if (xpos1 <= -22000) {
    win = true;
    //Reproduce el sonido de victoria
    victoria.play(1, vol[1].volume);
    xpos1 = -100;
  }
}
//Clase obstáculos
class obstaculos {
  int yposobjeto1, objetox1, objetoy1;
  float xposobjeto1;

  //Constructor
  obstaculos(float xposobjeto1, int yposobjeto1, int objetox1, int objetoy1) {
    this.xposobjeto1 = xposobjeto1;
    this.yposobjeto1 = yposobjeto1;
    this.objetox1 = objetox1;
    this.objetoy1 = objetoy1;
  }
  public void obstaculos1() {
    noFill();
    noStroke();
    if (!invulnerable) {
      rect(xposobjeto1 + xpos1, yposobjeto1, objetox1, objetoy1);

      //Detecta si el personaje colisiona con un objeto
      if (xpos + latinox >= xposobjeto1 + xpos1 &&
        xpos <= xposobjeto1 + xpos1 + objetox1 &&
        ypos + latinoy >= yposobjeto1 &&
        ypos <= yposobjeto1 + objetoy1) {
        invulnerable = true; //Activar la invulnerabilidad

        //Cuando colisiona va a saltar ya sea a la derecha o a la izquierda
        saltar();
        if (derecha) {
          xpos = xpos - 150;
        }
        if (izquierda) {
          xpos = xpos + 150;
        }

        colision = colision - 1;
        //Le quita una vida
        speed = 8;
        speed2 = 12;
        //Reinicia la velocidad del personaje

        //Dependiendo del personaje reproduce su sonido característico si no es la última vida que le queda
        if (op == 1 && colision != 0) {
          music1.play(1, vol[1].volume);
        } else if (op == 2 && colision != 0) {
          music2.play(1, vol[1].volume);
        } else if (op == 3 && colision != 0) {
          music3.play(1.8f, vol[1].volume);
        } else if (op == 4 && colision != 0) {
          music4.play(1, vol[1].volume);
        } else if (op == 5 && colision != 0) {
          music5.play(1, vol[1].volume);
        }

        tiempoColision = millis(); //Actualizar el tiempo de la última colisión
      }
    }
  }
}

//Este procedimiento sirve para evaluar las colisiones de los enemigos
public void obstaculos1(float xposobjeto1, int yposobjeto1, int objetox1, int objetoy1) {
  noFill();
  noStroke();
  if (!invulnerable) {

    //Detecta si el personaje colisiona con un objeto
    rect(xposobjeto1, yposobjeto1, objetox1, objetoy1);
    if (xpos + latinox >= xposobjeto1 &&
      xpos <= xposobjeto1 + objetox1 &&
      ypos + latinoy >= yposobjeto1 &&
      ypos <= yposobjeto1 + objetoy1) {
      invulnerable = true; //Activar la invulnerabilidad

      //Cuando colisiona va a saltar ya sea a la derecha o a la izquierda
      saltar();
      if (derecha) {
        xpos = xpos - 150;
      }
      if (izquierda) {
        xpos = xpos + 150;
      }
      colision = colision - 1;
      //Le quita una vida
      speed = 8;
      speed2 = 12;
      //Reinicia la velocidad del personaje

      //Dependiendo del personaje reproduce su sonido característico si no es la última vida que le queda
      if (op == 1 && colision != 0) {
        music1.play(1, vol[1].volume);
      } else if (op == 2 && colision != 0) {
        music2.play(1, vol[1].volume);
      } else if (op == 3 && colision != 0) {
        music3.play(1.8f, vol[1].volume);
      } else if (op == 4 && colision != 0) {
        music4.play(1, vol[1].volume);
      } else if (op == 5 && colision != 0) {
        music5.play(1, vol[1].volume);
      }

      tiempoColision = millis(); //Actualizar el tiempo de la última colisión
    }
  }
}
//Clase de las plataformas sobre las que el personaje puede caminar
class plataformas {
  int xposplat, yposplat, platx, platy;

  //Constructor
  plataformas(int xposplat, int yposplat, int platx, int platy) {
    this.xposplat = xposplat;
    this.yposplat = yposplat;
    this.platx = platx;
    this.platy = platy;
  }

  public void plataformas1() {
    //Si el personaje está sobre una plataforma se actualiza su posición en Y y es capaz de saltar sobre ella
    noFill();
    noStroke();
    rect(xposplat + xpos1, yposplat, platx, platy);
    if (ypos >= yposplat - latinoy && xpos + latinox >= xposplat + xpos1 && xpos <= xposplat + xpos1 + platx) {
      ypos = yposplat - latinoy;
      yspeed = 0;
      saltando = false;
    } else { //Si el personaje toca el suelo
      nosaltar();
    }
  }
}

//Con este procedimiento reiniciamos todas las variables utilizadas en el videojuego para que el jugador pueda volver a jugar
//También se dibujan nuevamente los objetos recolectados
public void reset() {
  xpos = 0;
  ypos = 482;
  speed = 8;
  speed2 = 12;
  xpos1 = 0;
  ypos1 = 0;
  colision = 3;
  derecha = false;
  abajo = false;
  izquierda = false;
  arriba = false;
  saltando = false;
  aTodaMadre = false;
  spaceWhileDown = false;
  spacePressed = false;
  pausaelapsed = 0;
  speedboolean = false;
  movimiento = false;
  tiempoInicio = 0;
  yspeed = 0;
  gravity = 1;
  velheli = 2;
  invulnerable = false;
  tiempoInvulnerable = 2000;
  tiempoColision = 0;
  dollars = 0;
  dollarcount = 0;
  muerto = false;
  win = false;
  for (i=0; i<ene.length; i++) {
    ene[i].vivo = true;
  }
  for (i=0; i<bille.length; i++) {
    bille[i].billete = true;
    bille[i].billetes1();
  }
  
  //Reinicia variables de posición final de los objetos especiales
  obj[0].posfinalx =50;
  obj[0].posfinaly = 100;
  obj[1].posfinalx =120;
  obj[1].posfinaly = 100;
  obj[2].posfinalx =190;
  obj[2].posfinaly = 100;
  //Dibujar objetos especiales
  for (i=0; i<obj.length; i++) {
    obj[i].botella1 = true;
    obj[i].botella2 = true;
    obj[i].botella();
  }
  //Reinicia el temporizador
  sw.restart();
  lastTime=0;
}

//Este botón aparece en la pantalla de muerte del personaje
public void botonrestart() {
  image(restart1, 0, 0);
  noFill();
  noStroke();
  rect(x, y, w, h);
  //Botón exit en menú restart
  rect(695, 580, 180, 57);
}

//Dibuja los corazones de las vidas
public void vidas() {
  vidax = 0;
  for (i=1; i<=colision; i++) {
    vidax = vidax + 60;
    image(vida1, vidax, 40);
  }
}

//Detecta cuando muere y reproduce el sonido de muerte
public void muerte() {
  if (colision == 0 && muerto == false) {
    muerte.play(1, vol[1].volume);
    muerto = true;
  }
  if (muerto) {
    muerto = false;
    //Se pone diferente a 0 pero igual muerto para que el sonido no se reproduzca infinitamente
    colision = -1;
  }
}
//Clase del volumen del juego
class volumen {
  float volume; //Variable que controla el valor del volumen como un valor de 0 a 1
  float sliderX;
  float sliderY;
  float sliderWidth;
  float sliderHeight;
  boolean dragging;
  
  //Constructor
  volumen(float volume, float sliderX, float sliderY, float sliderWidth, float sliderHeight, boolean dragging) {
    this.volume = volume;
    this.sliderX = sliderX;
    this.sliderY = sliderY;
    this.sliderWidth = sliderWidth;
    this.sliderHeight = sliderHeight;
    this.dragging = dragging;
  }
  
  public void volumen1() {
    //Calcular el porcentaje de volumen
    int percent = PApplet.parseInt(volume * 100);

    //Dibujar la barra de volumen
    fill(0xFF694433); //Color antes de la barra
    rect(sliderX, sliderY, volume * sliderWidth, sliderHeight);

    //volume * sliderWidth es el ancho de la barra

    fill(0xFFFFDE00); //Color después de la barra
    rect(sliderX + volume * sliderWidth, sliderY, (1 - volume) * sliderWidth, sliderHeight);

    //Mostrar el texto del porcentaje de volumen
    fill(255);
    textAlign(CENTER, CENTER);
    text(percent + "%", sliderX + sliderWidth / 2, sliderY + sliderHeight / 2);

    //Dibujar el control deslizante
    fill(255);
    rect(constrain(sliderX + volume * sliderWidth - 5, sliderX, sliderX + sliderWidth - 5), sliderY, 5, sliderHeight);
    
    //Escribir controles de volumen
    textAlign(CENTER);
    textSize(40);
    fill(255);
    text("Music", 780, 100);
    text("Sound Efects", 800, 220);
  }
}


  public void settings() { size(1580, 900); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Escaping_From_Latam" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
